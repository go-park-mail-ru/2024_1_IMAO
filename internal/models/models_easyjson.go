// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	sync "sync"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels(in *jlexer.Lexer, out *WaitingForCapturePaymentRecipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountID = string(in.String())
		case "gateway_id":
			out.GatewayID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels(out *jwriter.Writer, in WaitingForCapturePaymentRecipient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"gateway_id\":"
		out.RawString(prefix)
		out.String(string(in.GatewayID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WaitingForCapturePaymentRecipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WaitingForCapturePaymentRecipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WaitingForCapturePaymentRecipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WaitingForCapturePaymentRecipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels1(in *jlexer.Lexer, out *WaitingForCapturePaymentPaymentMethod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "saved":
			out.Saved = bool(in.Bool())
		case "title":
			out.Title = string(in.String())
		case "card":
			(out.Card).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels1(out *jwriter.Writer, in WaitingForCapturePaymentPaymentMethod) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"saved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Saved))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix)
		(in.Card).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WaitingForCapturePaymentPaymentMethod) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WaitingForCapturePaymentPaymentMethod) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WaitingForCapturePaymentPaymentMethod) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WaitingForCapturePaymentPaymentMethod) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels2(in *jlexer.Lexer, out *WaitingForCapturePaymentAmount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels2(out *jwriter.Writer, in WaitingForCapturePaymentAmount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WaitingForCapturePaymentAmount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WaitingForCapturePaymentAmount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WaitingForCapturePaymentAmount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WaitingForCapturePaymentAmount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels3(in *jlexer.Lexer, out *WaitingForCapturePayment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "recipient":
			(out.Recipient).UnmarshalEasyJSON(in)
		case "payment_method":
			(out.PaymentMethod).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "expires_at":
			out.ExpiresAt = string(in.String())
		case "test":
			out.Test = bool(in.Bool())
		case "paid":
			out.Paid = bool(in.Bool())
		case "refundable":
			out.Refundable = bool(in.Bool())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Metadata)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "authorization_details":
			(out.AuthorizationDetails).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels3(out *jwriter.Writer, in WaitingForCapturePayment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		(in.Recipient).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payment_method\":"
		out.RawString(prefix)
		(in.PaymentMethod).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"expires_at\":"
		out.RawString(prefix)
		out.String(string(in.ExpiresAt))
	}
	{
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Bool(bool(in.Test))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paid))
	}
	{
		const prefix string = ",\"refundable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Refundable))
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Metadata {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"authorization_details\":"
		out.RawString(prefix)
		(in.AuthorizationDetails).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WaitingForCapturePayment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WaitingForCapturePayment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WaitingForCapturePayment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WaitingForCapturePayment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels4(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels4(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels5(in *jlexer.Lexer, out *UnauthorizedUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "passwordRepeat":
			out.PasswordRepeat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels5(out *jwriter.Writer, in UnauthorizedUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"passwordRepeat\":"
		out.RawString(prefix)
		out.String(string(in.PasswordRepeat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnauthorizedUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnauthorizedUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnauthorizedUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnauthorizedUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels6(in *jlexer.Lexer, out *ThreeDSecure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "applied":
			out.Applied = bool(in.Bool())
		case "protocol":
			out.Protocol = string(in.String())
		case "method_completed":
			out.MethodCompleted = bool(in.Bool())
		case "challenge_completed":
			out.ChallengeCompleted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels6(out *jwriter.Writer, in ThreeDSecure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"applied\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Applied))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"method_completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.MethodCompleted))
	}
	{
		const prefix string = ",\"challenge_completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ChallengeCompleted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThreeDSecure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThreeDSecure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThreeDSecure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThreeDSecure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels7(in *jlexer.Lexer, out *SurveyResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveyTitle":
			out.SurveyTitle = string(in.String())
		case "surveyDescription":
			out.SurveyDescription = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]*QuestionResults, 0, 8)
					} else {
						out.Results = []*QuestionResults{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *QuestionResults
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(QuestionResults)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Results = append(out.Results, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels7(out *jwriter.Writer, in SurveyResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveyTitle\":"
		out.RawString(prefix[1:])
		out.String(string(in.SurveyTitle))
	}
	{
		const prefix string = ",\"surveyDescription\":"
		out.RawString(prefix)
		out.String(string(in.SurveyDescription))
	}
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix)
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Results {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels8(in *jlexer.Lexer, out *SurveyCheckResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isChecked":
			out.IsChecked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels8(out *jwriter.Writer, in SurveyCheckResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isChecked\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsChecked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyCheckResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyCheckResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyCheckResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyCheckResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels9(in *jlexer.Lexer, out *SurveyAnswersList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint(in.Uint())
		case "surveyId":
			out.SurveyID = uint(in.Uint())
		case "survey":
			if in.IsNull() {
				in.Skip()
				out.Survey = nil
			} else {
				in.Delim('[')
				if out.Survey == nil {
					if !in.IsDelim(']') {
						out.Survey = make([]*SurveyAnswer, 0, 8)
					} else {
						out.Survey = []*SurveyAnswer{}
					}
				} else {
					out.Survey = (out.Survey)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *SurveyAnswer
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(SurveyAnswer)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.Survey = append(out.Survey, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels9(out *jwriter.Writer, in SurveyAnswersList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"surveyId\":"
		out.RawString(prefix)
		out.Uint(uint(in.SurveyID))
	}
	{
		const prefix string = ",\"survey\":"
		out.RawString(prefix)
		if in.Survey == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Survey {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					(*v8).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyAnswersList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyAnswersList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyAnswersList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyAnswersList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels10(in *jlexer.Lexer, out *SurveyAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answerNum":
			out.AnswerNum = uint(in.Uint())
		case "answerValue":
			out.AnswerValue = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels10(out *jwriter.Writer, in SurveyAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answerNum\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AnswerNum))
	}
	{
		const prefix string = ",\"answerValue\":"
		out.RawString(prefix)
		out.Uint(uint(in.AnswerValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels11(in *jlexer.Lexer, out *Survey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveyTitle":
			out.SurveyTitle = string(in.String())
		case "surveyDescription":
			out.SurveyDescription = string(in.String())
		case "questionNumber":
			out.QuestionNumber = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels11(out *jwriter.Writer, in Survey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveyTitle\":"
		out.RawString(prefix[1:])
		out.String(string(in.SurveyTitle))
	}
	{
		const prefix string = ",\"surveyDescription\":"
		out.RawString(prefix)
		out.String(string(in.SurveyDescription))
	}
	{
		const prefix string = ",\"questionNumber\":"
		out.RawString(prefix)
		out.Uint(uint(in.QuestionNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Survey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Survey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Survey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Survey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels12(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels12(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels13(in *jlexer.Lexer, out *SetProfileRatingNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reaction":
			out.Reaction = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels13(out *jwriter.Writer, in SetProfileRatingNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Reaction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetProfileRatingNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetProfileRatingNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetProfileRatingNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetProfileRatingNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels14(in *jlexer.Lexer, out *SetProfilePhoneNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phone":
			out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels14(out *jwriter.Writer, in SetProfilePhoneNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix[1:])
		out.String(string(in.Phone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetProfilePhoneNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetProfilePhoneNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetProfilePhoneNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetProfilePhoneNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels15(in *jlexer.Lexer, out *SetProfileNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "avatar":
			(out.Avatar).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels15(out *jwriter.Writer, in SetProfileNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		(in.Avatar).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetProfileNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetProfileNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetProfileNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetProfileNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels16(in *jlexer.Lexer, out *SetProfileCityNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels16(out *jwriter.Writer, in SetProfileCityNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix[1:])
		(in.City).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetProfileCityNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetProfileCityNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetProfileCityNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetProfileCityNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels17(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = uint32(in.Uint32())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels17(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserID))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels18(in *jlexer.Lexer, out *ReturningOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderItem":
			(out.OrderItem).UnmarshalEasyJSON(in)
		case "advert":
			(out.ReturningAdvert).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels18(out *jwriter.Writer, in ReturningOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderItem\":"
		out.RawString(prefix[1:])
		(in.OrderItem).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"advert\":"
		out.RawString(prefix)
		(in.ReturningAdvert).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReturningOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReturningOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReturningOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReturningOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels19(in *jlexer.Lexer, out *ReturningAdvertList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AdvertItems":
			if in.IsNull() {
				in.Skip()
				out.AdvertItems = nil
			} else {
				in.Delim('[')
				if out.AdvertItems == nil {
					if !in.IsDelim(']') {
						out.AdvertItems = make([]*ReturningAdvert, 0, 8)
					} else {
						out.AdvertItems = []*ReturningAdvert{}
					}
				} else {
					out.AdvertItems = (out.AdvertItems)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *ReturningAdvert
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(ReturningAdvert)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.AdvertItems = append(out.AdvertItems, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels19(out *jwriter.Writer, in ReturningAdvertList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AdvertItems\":"
		out.RawString(prefix[1:])
		if in.AdvertItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.AdvertItems {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReturningAdvertList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReturningAdvertList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReturningAdvertList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReturningAdvertList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels19(l, v)
}
func easyjsonD2b7633eDecodeSync(in *jlexer.Lexer, out *sync.RWMutex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeSync(out *jwriter.Writer, in sync.RWMutex) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels20(in *jlexer.Lexer, out *ReturningAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advert":
			(out.Advert).UnmarshalEasyJSON(in)
		case "promotion":
			(out.Promotion).UnmarshalEasyJSON(in)
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		case "category":
			(out.Category).UnmarshalEasyJSON(in)
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Photos = append(out.Photos, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "photosIMG":
			if in.IsNull() {
				in.Skip()
				out.PhotosIMG = nil
			} else {
				in.Delim('[')
				if out.PhotosIMG == nil {
					if !in.IsDelim(']') {
						out.PhotosIMG = make([]string, 0, 4)
					} else {
						out.PhotosIMG = []string{}
					}
				} else {
					out.PhotosIMG = (out.PhotosIMG)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.PhotosIMG = append(out.PhotosIMG, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels20(out *jwriter.Writer, in ReturningAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advert\":"
		out.RawString(prefix[1:])
		(in.Advert).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"promotion\":"
		out.RawString(prefix)
		(in.Promotion).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		(in.City).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		(in.Category).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Photos {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"photosIMG\":"
		out.RawString(prefix)
		if in.PhotosIMG == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.PhotosIMG {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReturningAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReturningAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReturningAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReturningAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels20(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels21(in *jlexer.Lexer, out *ReturningAdInList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "price":
			out.Price = uint(in.Uint())
		case "city":
			out.City = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Photos = append(out.Photos, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "photosIMG":
			if in.IsNull() {
				in.Skip()
				out.PhotosIMG = nil
			} else {
				in.Delim('[')
				if out.PhotosIMG == nil {
					if !in.IsDelim(']') {
						out.PhotosIMG = make([]string, 0, 4)
					} else {
						out.PhotosIMG = []string{}
					}
				} else {
					out.PhotosIMG = (out.PhotosIMG)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.PhotosIMG = append(out.PhotosIMG, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inFavourites":
			out.InFavourites = bool(in.Bool())
		case "inCart":
			out.InCart = bool(in.Bool())
		case "isPromoted":
			out.IsPromoted = bool(in.Bool())
		case "isActive":
			out.IsActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels21(out *jwriter.Writer, in ReturningAdInList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint(uint(in.Price))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Photos {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"photosIMG\":"
		out.RawString(prefix)
		if in.PhotosIMG == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.PhotosIMG {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"inFavourites\":"
		out.RawString(prefix)
		out.Bool(bool(in.InFavourites))
	}
	{
		const prefix string = ",\"inCart\":"
		out.RawString(prefix)
		out.Bool(bool(in.InCart))
	}
	{
		const prefix string = ",\"isPromoted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPromoted))
	}
	{
		const prefix string = ",\"isActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReturningAdInList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReturningAdInList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReturningAdInList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReturningAdInList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels21(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels22(in *jlexer.Lexer, out *Recipient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountID = string(in.String())
		case "gateway_id":
			out.GatewayID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels22(out *jwriter.Writer, in Recipient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"gateway_id\":"
		out.RawString(prefix)
		out.String(string(in.GatewayID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recipient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recipient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recipient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recipient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels22(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels23(in *jlexer.Lexer, out *ReceivedPaymentFormItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.AdvertID = uint(in.Uint())
		case "rate":
			out.Rate = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels23(out *jwriter.Writer, in ReceivedPaymentFormItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AdvertID))
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Uint(uint(in.Rate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedPaymentFormItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedPaymentFormItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedPaymentFormItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedPaymentFormItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels23(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels24(in *jlexer.Lexer, out *ReceivedOrderItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adverts":
			if in.IsNull() {
				in.Skip()
				out.Adverts = nil
			} else {
				in.Delim('[')
				if out.Adverts == nil {
					if !in.IsDelim(']') {
						out.Adverts = make([]*ReceivedOrderItem, 0, 8)
					} else {
						out.Adverts = []*ReceivedOrderItem{}
					}
				} else {
					out.Adverts = (out.Adverts)[:0]
				}
				for !in.IsDelim(']') {
					var v24 *ReceivedOrderItem
					if in.IsNull() {
						in.Skip()
						v24 = nil
					} else {
						if v24 == nil {
							v24 = new(ReceivedOrderItem)
						}
						(*v24).UnmarshalEasyJSON(in)
					}
					out.Adverts = append(out.Adverts, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels24(out *jwriter.Writer, in ReceivedOrderItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adverts\":"
		out.RawString(prefix[1:])
		if in.Adverts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Adverts {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					(*v26).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedOrderItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedOrderItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedOrderItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedOrderItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels24(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels25(in *jlexer.Lexer, out *ReceivedOrderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertID":
			out.AdvertID = uint(in.Uint())
		case "phone":
			out.Phone = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "adress":
			out.Adress = string(in.String())
		case "deliveryPrice":
			out.DeliveryPrice = uint(in.Uint())
		case "address":
			out.DeliveryAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels25(out *jwriter.Writer, in ReceivedOrderItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AdvertID))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Adress))
	}
	{
		const prefix string = ",\"deliveryPrice\":"
		out.RawString(prefix)
		out.Uint(uint(in.DeliveryPrice))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.DeliveryAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedOrderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedOrderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedOrderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedOrderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels25(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels26(in *jlexer.Lexer, out *ReceivedMerchantItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "merchantId":
			out.MerchantID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels26(out *jwriter.Writer, in ReceivedMerchantItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"merchantId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MerchantID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedMerchantItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedMerchantItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedMerchantItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedMerchantItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels26(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels27(in *jlexer.Lexer, out *ReceivedCartItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertIDs":
			if in.IsNull() {
				in.Skip()
				out.AdvertIDs = nil
			} else {
				in.Delim('[')
				if out.AdvertIDs == nil {
					if !in.IsDelim(']') {
						out.AdvertIDs = make([]uint, 0, 8)
					} else {
						out.AdvertIDs = []uint{}
					}
				} else {
					out.AdvertIDs = (out.AdvertIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v27 uint
					v27 = uint(in.Uint())
					out.AdvertIDs = append(out.AdvertIDs, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels27(out *jwriter.Writer, in ReceivedCartItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertIDs\":"
		out.RawString(prefix[1:])
		if in.AdvertIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.AdvertIDs {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v29))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedCartItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedCartItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedCartItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedCartItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels27(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels28(in *jlexer.Lexer, out *ReceivedCartItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.AdvertID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels28(out *jwriter.Writer, in ReceivedCartItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AdvertID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedCartItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedCartItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedCartItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedCartItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels28(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels29(in *jlexer.Lexer, out *ReceivedAdData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.ID = uint(in.Uint())
		case "userId":
			out.UserID = uint(in.Uint())
		case "city":
			out.City = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			out.Price = uint(in.Uint())
		case "isUsed":
			out.IsUsed = bool(in.Bool())
		case "phone":
			out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels29(out *jwriter.Writer, in ReceivedAdData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint(uint(in.Price))
	}
	{
		const prefix string = ",\"isUsed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUsed))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceivedAdData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceivedAdData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceivedAdData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceivedAdData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels29(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels30(in *jlexer.Lexer, out *QuestionResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "QuestionResults":
			if in.IsNull() {
				in.Skip()
				out.QuestionResults = nil
			} else {
				in.Delim('[')
				if out.QuestionResults == nil {
					if !in.IsDelim(']') {
						out.QuestionResults = make([]uint, 0, 8)
					} else {
						out.QuestionResults = []uint{}
					}
				} else {
					out.QuestionResults = (out.QuestionResults)[:0]
				}
				for !in.IsDelim(']') {
					var v30 uint
					v30 = uint(in.Uint())
					out.QuestionResults = append(out.QuestionResults, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels30(out *jwriter.Writer, in QuestionResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"QuestionResults\":"
		out.RawString(prefix[1:])
		if in.QuestionResults == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.QuestionResults {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v32))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels30(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels31(in *jlexer.Lexer, out *Promotion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "needPing":
			out.NeedPing = bool(in.Bool())
		case "isPromoted":
			out.IsPromoted = bool(in.Bool())
		case "promotionStart":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PromotionStart).UnmarshalJSON(data))
			}
		case "promotionDuration":
			easyjsonD2b7633eDecodeGithubComJackcPgxV5Pgtype(in, &out.PromotionDuration)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels31(out *jwriter.Writer, in Promotion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"needPing\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.NeedPing))
	}
	{
		const prefix string = ",\"isPromoted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPromoted))
	}
	{
		const prefix string = ",\"promotionStart\":"
		out.RawString(prefix)
		out.Raw((in.PromotionStart).MarshalJSON())
	}
	{
		const prefix string = ",\"promotionDuration\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeGithubComJackcPgxV5Pgtype(out, in.PromotionDuration)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Promotion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Promotion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Promotion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Promotion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels31(l, v)
}
func easyjsonD2b7633eDecodeGithubComJackcPgxV5Pgtype(in *jlexer.Lexer, out *pgtype.Interval) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Microseconds":
			out.Microseconds = int64(in.Int64())
		case "Days":
			out.Days = int32(in.Int32())
		case "Months":
			out.Months = int32(in.Int32())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComJackcPgxV5Pgtype(out *jwriter.Writer, in pgtype.Interval) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Microseconds\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Microseconds))
	}
	{
		const prefix string = ",\"Days\":"
		out.RawString(prefix)
		out.Int32(int32(in.Days))
	}
	{
		const prefix string = ",\"Months\":"
		out.RawString(prefix)
		out.Int32(int32(in.Months))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels32(in *jlexer.Lexer, out *ProfilePad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		case "phoneNumber":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels32(out *jwriter.Writer, in ProfilePad) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		if in.Phone == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Phone))
		}
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		if in.Avatar == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Avatar))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfilePad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfilePad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfilePad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfilePad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels32(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels33(in *jlexer.Lexer, out *ProfileList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Profiles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Profiles = make(map[uint]*Profile)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v33 *Profile
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(Profile)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					(out.Profiles)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels33(out *jwriter.Writer, in ProfileList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Profiles\":"
		out.RawString(prefix[1:])
		if in.Profiles == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.Profiles {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v34Name))
				out.RawByte(':')
				if v34Value == nil {
					out.RawString("null")
				} else {
					(*v34Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels33(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels34(in *jlexer.Lexer, out *ProfileAppended) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isAppended":
			out.IsAppended = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels34(out *jwriter.Writer, in ProfileAppended) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isAppended\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsAppended))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileAppended) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileAppended) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileAppended) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileAppended) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels34(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels35(in *jlexer.Lexer, out *ProfileAdvertsNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter":
			out.Filter = AdvertsFilter(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels35(out *jwriter.Writer, in ProfileAdvertsNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filter\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Filter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileAdvertsNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileAdvertsNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileAdvertsNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileAdvertsNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels35(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels36(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "userId":
			out.UserID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		case "phoneNumber":
			out.Phone = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "regTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RegisterTime).UnmarshalJSON(data))
			}
		case "rating":
			out.Rating = float32(in.Float32())
		case "reactionsCount":
			out.ReactionsCount = float32(in.Float32())
		case "approved":
			out.Approved = bool(in.Bool())
		case "merchantsName":
			out.MerchantsName = string(in.String())
		case "subersCount":
			out.SubersCount = int(in.Int())
		case "subonsCount":
			out.SubonsCount = int(in.Int())
		case "avatarImg":
			out.AvatarIMG = string(in.String())
		case "activeAddsCount":
			out.ActiveAddsCount = int(in.Int())
		case "soldAddsCount":
			out.SoldAddsCount = int(in.Int())
		case "cartNum":
			out.CartNum = uint(in.Uint())
		case "favNum":
			out.FavNum = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels36(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		(in.City).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"regTime\":"
		out.RawString(prefix)
		out.Raw((in.RegisterTime).MarshalJSON())
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"reactionsCount\":"
		out.RawString(prefix)
		out.Float32(float32(in.ReactionsCount))
	}
	{
		const prefix string = ",\"approved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Approved))
	}
	{
		const prefix string = ",\"merchantsName\":"
		out.RawString(prefix)
		out.String(string(in.MerchantsName))
	}
	{
		const prefix string = ",\"subersCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubersCount))
	}
	{
		const prefix string = ",\"subonsCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubonsCount))
	}
	{
		const prefix string = ",\"avatarImg\":"
		out.RawString(prefix)
		out.String(string(in.AvatarIMG))
	}
	{
		const prefix string = ",\"activeAddsCount\":"
		out.RawString(prefix)
		out.Int(int(in.ActiveAddsCount))
	}
	{
		const prefix string = ",\"soldAddsCount\":"
		out.RawString(prefix)
		out.Int(int(in.SoldAddsCount))
	}
	{
		const prefix string = ",\"cartNum\":"
		out.RawString(prefix)
		out.Uint(uint(in.CartNum))
	}
	{
		const prefix string = ",\"favNum\":"
		out.RawString(prefix)
		out.Uint(uint(in.FavNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels36(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels37(in *jlexer.Lexer, out *PriceHistoryItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updatedTime":
			out.UpdatedTime = string(in.String())
		case "newPrice":
			out.NewPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels37(out *jwriter.Writer, in PriceHistoryItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"updatedTime\":"
		out.RawString(prefix[1:])
		out.String(string(in.UpdatedTime))
	}
	{
		const prefix string = ",\"newPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.NewPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceHistoryItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceHistoryItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceHistoryItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceHistoryItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels37(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels38(in *jlexer.Lexer, out *PriceAndDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "urlEnding":
			out.URLEnding = string(in.String())
		case "duration":
			out.Duration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels38(out *jwriter.Writer, in PriceAndDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"urlEnding\":"
		out.RawString(prefix)
		out.String(string(in.URLEnding))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.String(string(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceAndDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceAndDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceAndDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceAndDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels38(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels39(in *jlexer.Lexer, out *PhotoPadSoloImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(string)
				}
				*out.Photo = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels39(out *jwriter.Writer, in PhotoPadSoloImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		if in.Photo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Photo))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoPadSoloImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoPadSoloImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoPadSoloImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoPadSoloImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels39(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels40(in *jlexer.Lexer, out *PhotoPad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]*string, 0, 8)
					} else {
						out.Photo = []*string{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *string
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(string)
						}
						*v35 = string(in.String())
					}
					out.Photo = append(out.Photo, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels40(out *jwriter.Writer, in PhotoPad) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Photo {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v37))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoPad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoPad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoPad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoPad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels40(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels41(in *jlexer.Lexer, out *PaymnetUUIDListPad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pad":
			if in.IsNull() {
				in.Skip()
				out.Pad = nil
			} else {
				in.Delim('[')
				if out.Pad == nil {
					if !in.IsDelim(']') {
						out.Pad = make([]*string, 0, 8)
					} else {
						out.Pad = []*string{}
					}
				} else {
					out.Pad = (out.Pad)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *string
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(string)
						}
						*v38 = string(in.String())
					}
					out.Pad = append(out.Pad, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels41(out *jwriter.Writer, in PaymnetUUIDListPad) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pad\":"
		out.RawString(prefix[1:])
		if in.Pad == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Pad {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v40))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymnetUUIDListPad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymnetUUIDListPad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymnetUUIDListPad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymnetUUIDListPad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels41(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels42(in *jlexer.Lexer, out *PaymnetUUIDList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuidList":
			if in.IsNull() {
				in.Skip()
				out.UUIDList = nil
			} else {
				in.Delim('[')
				if out.UUIDList == nil {
					if !in.IsDelim(']') {
						out.UUIDList = make([]string, 0, 4)
					} else {
						out.UUIDList = []string{}
					}
				} else {
					out.UUIDList = (out.UUIDList)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.UUIDList = append(out.UUIDList, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels42(out *jwriter.Writer, in PaymnetUUIDList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuidList\":"
		out.RawString(prefix[1:])
		if in.UUIDList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.UUIDList {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymnetUUIDList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymnetUUIDList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymnetUUIDList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymnetUUIDList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels42(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels43(in *jlexer.Lexer, out *PaymentsDatesList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*time.Time, 0, 8)
					} else {
						out.List = []*time.Time{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v44 *time.Time
					if in.IsNull() {
						in.Skip()
						v44 = nil
					} else {
						if v44 == nil {
							v44 = new(time.Time)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v44).UnmarshalJSON(data))
						}
					}
					out.List = append(out.List, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels43(out *jwriter.Writer, in PaymentsDatesList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"List\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.List {
				if v45 > 0 {
					out.RawByte(',')
				}
				if v46 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v46).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentsDatesList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentsDatesList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentsDatesList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentsDatesList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels43(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels44(in *jlexer.Lexer, out *PaymentMethod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "saved":
			out.Saved = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels44(out *jwriter.Writer, in PaymentMethod) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"saved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Saved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethod) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethod) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethod) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethod) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels44(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels45(in *jlexer.Lexer, out *PaymentList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]WaitingForCapturePayment, 0, 0)
					} else {
						out.Items = []WaitingForCapturePayment{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v47 WaitingForCapturePayment
					(v47).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels45(out *jwriter.Writer, in PaymentList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Items {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels45(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels46(in *jlexer.Lexer, out *PaymentInitPaymentMethodData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels46(out *jwriter.Writer, in PaymentInitPaymentMethodData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentInitPaymentMethodData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentInitPaymentMethodData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentInitPaymentMethodData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentInitPaymentMethodData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels46(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels47(in *jlexer.Lexer, out *PaymentInitData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "payment_method_data":
			(out.PaymentMethodData).UnmarshalEasyJSON(in)
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels47(out *jwriter.Writer, in PaymentInitData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payment_method_data\":"
		out.RawString(prefix)
		(in.PaymentMethodData).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentInitData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentInitData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentInitData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentInitData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels47(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels48(in *jlexer.Lexer, out *PaymentInitConfirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "return_url":
			out.ReturnURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels48(out *jwriter.Writer, in PaymentInitConfirmation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"return_url\":"
		out.RawString(prefix)
		out.String(string(in.ReturnURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentInitConfirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentInitConfirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentInitConfirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentInitConfirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels48(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels49(in *jlexer.Lexer, out *PaymentInitAmount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels49(out *jwriter.Writer, in PaymentInitAmount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentInitAmount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentInitAmount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentInitAmount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentInitAmount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels49(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels50(in *jlexer.Lexer, out *PaymentFormResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "paymentFormUrl":
			out.PaymentFormURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels50(out *jwriter.Writer, in PaymentFormResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"paymentFormUrl\":"
		out.RawString(prefix[1:])
		out.String(string(in.PaymentFormURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentFormResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentFormResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentFormResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentFormResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels50(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels51(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "recipient":
			(out.Recipient).UnmarshalEasyJSON(in)
		case "payment_method":
			(out.PaymentMethod).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		case "test":
			out.Test = bool(in.Bool())
		case "paid":
			out.Paid = bool(in.Bool())
		case "refundable":
			out.Refundable = bool(in.Bool())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v50 interface{}
					if m, ok := v50.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v50.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v50 = in.Interface()
					}
					(out.Metadata)[key] = v50
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels51(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		(in.Recipient).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payment_method\":"
		out.RawString(prefix)
		(in.PaymentMethod).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Bool(bool(in.Test))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paid))
	}
	{
		const prefix string = ",\"refundable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Refundable))
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.Metadata {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v51Name))
				out.RawByte(':')
				if m, ok := v51Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v51Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v51Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels51(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels52(in *jlexer.Lexer, out *OrderList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*OrderItem, 0, 8)
					} else {
						out.Items = []*OrderItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v52 *OrderItem
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(OrderItem)
						}
						(*v52).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels52(out *jwriter.Writer, in OrderList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Items {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil {
					out.RawString("null")
				} else {
					(*v54).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels52(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels53(in *jlexer.Lexer, out *OrderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "userId":
			out.UserID = uint(in.Uint())
		case "advertId":
			out.AdvertID = uint(in.Uint())
		case "status":
			out.Status = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "closed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Closed).UnmarshalJSON(data))
			}
		case "phone":
			out.Phone = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "deliveryPrice":
			out.DeliveryPrice = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels53(out *jwriter.Writer, in OrderItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdvertID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Raw((in.Updated).MarshalJSON())
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Raw((in.Closed).MarshalJSON())
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"deliveryPrice\":"
		out.RawString(prefix)
		out.Uint(uint(in.DeliveryPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels53(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels54(in *jlexer.Lexer, out *OrderCreated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isCreated":
			out.IsCreated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels54(out *jwriter.Writer, in OrderCreated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isCreated\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsCreated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderCreated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCreated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderCreated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCreated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels54(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels55(in *jlexer.Lexer, out *OkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "items":
			if m, ok := out.Items.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Items.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Items = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels55(out *jwriter.Writer, in OkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if m, ok := in.Items.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Items.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Items))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels55(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels56(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels56(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Image) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Image) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels56(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels57(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels57(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels57(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels58(in *jlexer.Lexer, out *EditProfileNec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		case "phone":
			out.Phone = string(in.String())
		case "merchantsName":
			out.MerchantsName = string(in.String())
		case "subersCount":
			out.SubersCount = int(in.Int())
		case "subonsCount":
			out.SubonsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels58(out *jwriter.Writer, in EditProfileNec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		(in.City).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"merchantsName\":"
		out.RawString(prefix)
		out.String(string(in.MerchantsName))
	}
	{
		const prefix string = ",\"subersCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubersCount))
	}
	{
		const prefix string = ",\"subonsCount\":"
		out.RawString(prefix)
		out.Int(int(in.SubonsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditProfileNec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditProfileNec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditProfileNec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditProfileNec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels58(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels59(in *jlexer.Lexer, out *DBInsertionUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels59(out *jwriter.Writer, in DBInsertionUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBInsertionUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBInsertionUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBInsertionUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBInsertionUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels59(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels60(in *jlexer.Lexer, out *DBInsertionProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint(in.Uint())
		case "cityId":
			out.CityID = uint(in.Uint())
		case "phone":
			out.Phone = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels60(out *jwriter.Writer, in DBInsertionProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"cityId\":"
		out.RawString(prefix)
		out.Uint(uint(in.CityID))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBInsertionProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBInsertionProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBInsertionProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBInsertionProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels60(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels61(in *jlexer.Lexer, out *DBInsertionAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint(in.Uint())
		case "cityId":
			out.CityID = uint(in.Uint())
		case "categoryId":
			out.CategoryID = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			out.Price = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels61(out *jwriter.Writer, in DBInsertionAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"cityId\":"
		out.RawString(prefix)
		out.Uint(uint(in.CityID))
	}
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix)
		out.Uint(uint(in.CategoryID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint(uint(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBInsertionAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBInsertionAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBInsertionAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBInsertionAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels61(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels62(in *jlexer.Lexer, out *Confirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "return_url":
			out.ReturnURL = string(in.String())
		case "confirmation_url":
			out.ConfirmationURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels62(out *jwriter.Writer, in Confirmation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"return_url\":"
		out.RawString(prefix)
		out.String(string(in.ReturnURL))
	}
	{
		const prefix string = ",\"confirmation_url\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmationURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Confirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Confirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Confirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Confirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels62(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels63(in *jlexer.Lexer, out *CityList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CityItems":
			if in.IsNull() {
				in.Skip()
				out.CityItems = nil
			} else {
				in.Delim('[')
				if out.CityItems == nil {
					if !in.IsDelim(']') {
						out.CityItems = make([]*City, 0, 8)
					} else {
						out.CityItems = []*City{}
					}
				} else {
					out.CityItems = (out.CityItems)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *City
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(City)
						}
						(*v55).UnmarshalEasyJSON(in)
					}
					out.CityItems = append(out.CityItems, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels63(out *jwriter.Writer, in CityList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CityItems\":"
		out.RawString(prefix[1:])
		if in.CityItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.CityItems {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CityList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CityList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CityList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CityList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels63(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels64(in *jlexer.Lexer, out *City) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.CityName = string(in.String())
		case "translation":
			out.Translation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels64(out *jwriter.Writer, in City) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.CityName))
	}
	{
		const prefix string = ",\"translation\":"
		out.RawString(prefix)
		out.String(string(in.Translation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v City) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v City) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *City) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *City) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels64(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels65(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "translation":
			out.Translation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels65(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"translation\":"
		out.RawString(prefix)
		out.String(string(in.Translation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels65(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels66(in *jlexer.Lexer, out *CartList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*CartItem, 0, 8)
					} else {
						out.Items = []*CartItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *CartItem
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(CartItem)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels66(out *jwriter.Writer, in CartList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Items {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels66(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels67(in *jlexer.Lexer, out *CartItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = uint(in.Uint())
		case "AdvertID":
			out.AdvertID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels67(out *jwriter.Writer, in CartItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"AdvertID\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdvertID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels67(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels68(in *jlexer.Lexer, out *CardProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels68(out *jwriter.Writer, in CardProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels68(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels69(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first6":
			out.First6 = string(in.String())
		case "last4":
			out.Last4 = string(in.String())
		case "expiry_year":
			out.ExpiryYear = string(in.String())
		case "expiry_month":
			out.ExpiryMonth = string(in.String())
		case "card_type":
			out.CardType = string(in.String())
		case "card_product":
			(out.CardProduct).UnmarshalEasyJSON(in)
		case "issuer_country":
			out.IssuerCountry = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels69(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first6\":"
		out.RawString(prefix[1:])
		out.String(string(in.First6))
	}
	{
		const prefix string = ",\"last4\":"
		out.RawString(prefix)
		out.String(string(in.Last4))
	}
	{
		const prefix string = ",\"expiry_year\":"
		out.RawString(prefix)
		out.String(string(in.ExpiryYear))
	}
	{
		const prefix string = ",\"expiry_month\":"
		out.RawString(prefix)
		out.String(string(in.ExpiryMonth))
	}
	{
		const prefix string = ",\"card_type\":"
		out.RawString(prefix)
		out.String(string(in.CardType))
	}
	{
		const prefix string = ",\"card_product\":"
		out.RawString(prefix)
		(in.CardProduct).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"issuer_country\":"
		out.RawString(prefix)
		out.String(string(in.IssuerCountry))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels69(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels70(in *jlexer.Lexer, out *CSRFToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TokenBody":
			out.TokenBody = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels70(out *jwriter.Writer, in CSRFToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TokenBody\":"
		out.RawString(prefix[1:])
		out.String(string(in.TokenBody))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRFToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRFToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRFToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRFToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels70(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels71(in *jlexer.Lexer, out *AuthorizationDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rrn":
			out.RRN = string(in.String())
		case "auth_code":
			out.AuthCode = string(in.String())
		case "three_d_secure":
			(out.ThreeDSecure).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels71(out *jwriter.Writer, in AuthorizationDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rrn\":"
		out.RawString(prefix[1:])
		out.String(string(in.RRN))
	}
	{
		const prefix string = ",\"auth_code\":"
		out.RawString(prefix)
		out.String(string(in.AuthCode))
	}
	{
		const prefix string = ",\"three_d_secure\":"
		out.RawString(prefix)
		(in.ThreeDSecure).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthorizationDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthorizationDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthorizationDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthorizationDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels71(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels72(in *jlexer.Lexer, out *AuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "avatarImg":
			out.Avatar = string(in.String())
		case "isAuth":
			out.IsAuth = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels72(out *jwriter.Writer, in AuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"avatarImg\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"isAuth\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAuth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels72(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels73(in *jlexer.Lexer, out *Appended) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isAppended":
			out.IsAppended = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels73(out *jwriter.Writer, in Appended) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isAppended\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsAppended))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Appended) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Appended) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Appended) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Appended) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels73(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels74(in *jlexer.Lexer, out *Amount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels74(out *jwriter.Writer, in Amount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Amount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Amount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Amount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Amount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels74(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels75(in *jlexer.Lexer, out *AdvertsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Adverts":
			if in.IsNull() {
				in.Skip()
				out.Adverts = nil
			} else {
				in.Delim('[')
				if out.Adverts == nil {
					if !in.IsDelim(']') {
						out.Adverts = make([]*Advert, 0, 8)
					} else {
						out.Adverts = []*Advert{}
					}
				} else {
					out.Adverts = (out.Adverts)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *Advert
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(Advert)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.Adverts = append(out.Adverts, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]*Category, 0, 8)
					} else {
						out.Categories = []*Category{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v62 *Category
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						if v62 == nil {
							v62 = new(Category)
						}
						(*v62).UnmarshalEasyJSON(in)
					}
					out.Categories = append(out.Categories, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Cities":
			if in.IsNull() {
				in.Skip()
				out.Cities = nil
			} else {
				in.Delim('[')
				if out.Cities == nil {
					if !in.IsDelim(']') {
						out.Cities = make([]*City, 0, 8)
					} else {
						out.Cities = []*City{}
					}
				} else {
					out.Cities = (out.Cities)[:0]
				}
				for !in.IsDelim(']') {
					var v63 *City
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						if v63 == nil {
							v63 = new(City)
						}
						(*v63).UnmarshalEasyJSON(in)
					}
					out.Cities = append(out.Cities, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AdvertsCounter":
			out.AdvertsCounter = uint(in.Uint())
		case "CitiesCounter":
			out.CitiesCounter = uint(in.Uint())
		case "CategoriesCounter":
			out.CategoriesCounter = uint(in.Uint())
		case "Mux":
			easyjsonD2b7633eDecodeSync(in, &out.Mux)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels75(out *jwriter.Writer, in AdvertsList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Adverts\":"
		out.RawString(prefix[1:])
		if in.Adverts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.Adverts {
				if v64 > 0 {
					out.RawByte(',')
				}
				if v65 == nil {
					out.RawString("null")
				} else {
					(*v65).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.Categories {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					(*v67).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Cities\":"
		out.RawString(prefix)
		if in.Cities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Cities {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					(*v69).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AdvertsCounter\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdvertsCounter))
	}
	{
		const prefix string = ",\"CitiesCounter\":"
		out.RawString(prefix)
		out.Uint(uint(in.CitiesCounter))
	}
	{
		const prefix string = ",\"CategoriesCounter\":"
		out.RawString(prefix)
		out.Uint(uint(in.CategoriesCounter))
	}
	{
		const prefix string = ",\"Mux\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeSync(out, in.Mux)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertsList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertsList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels75(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels76(in *jlexer.Lexer, out *Advert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "userId":
			out.UserID = uint(in.Uint())
		case "cityId":
			out.CityID = uint(in.Uint())
		case "categoryId":
			out.CategoryID = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "price":
			out.Price = uint(in.Uint())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedTime).UnmarshalJSON(data))
			}
		case "closed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ClosedTime).UnmarshalJSON(data))
			}
		case "active":
			out.Active = bool(in.Bool())
		case "isUsed":
			out.IsUsed = bool(in.Bool())
		case "views":
			out.Views = uint(in.Uint())
		case "inFavourites":
			out.InFavourites = bool(in.Bool())
		case "inCart":
			out.InCart = bool(in.Bool())
		case "favouritesNum":
			out.FavouritesNum = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels76(out *jwriter.Writer, in Advert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"cityId\":"
		out.RawString(prefix)
		out.Uint(uint(in.CityID))
	}
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix)
		out.Uint(uint(in.CategoryID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint(uint(in.Price))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.CreatedTime).MarshalJSON())
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Raw((in.ClosedTime).MarshalJSON())
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"isUsed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUsed))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Uint(uint(in.Views))
	}
	{
		const prefix string = ",\"inFavourites\":"
		out.RawString(prefix)
		out.Bool(bool(in.InFavourites))
	}
	{
		const prefix string = ",\"inCart\":"
		out.RawString(prefix)
		out.Bool(bool(in.InCart))
	}
	{
		const prefix string = ",\"favouritesNum\":"
		out.RawString(prefix)
		out.Uint(uint(in.FavouritesNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Advert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Advert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Advert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Advert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels76(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels77(in *jlexer.Lexer, out *AdditionalUserData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "avatarImg":
			out.Avatar = string(in.String())
		case "isAuth":
			out.IsAuth = bool(in.Bool())
		case "cartNum":
			out.CartNum = uint(in.Uint())
		case "favNum":
			out.FavNum = uint(in.Uint())
		case "phoneNumber":
			out.PhoneNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels77(out *jwriter.Writer, in AdditionalUserData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"avatarImg\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"isAuth\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAuth))
	}
	{
		const prefix string = ",\"cartNum\":"
		out.RawString(prefix)
		out.Uint(uint(in.CartNum))
	}
	{
		const prefix string = ",\"favNum\":"
		out.RawString(prefix)
		out.Uint(uint(in.FavNum))
	}
	{
		const prefix string = ",\"phoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdditionalUserData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdditionalUserData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20241IMAOInternalModels77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdditionalUserData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdditionalUserData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20241IMAOInternalModels77(l, v)
}
