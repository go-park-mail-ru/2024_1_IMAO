//protoc --go_out=. --go-grpc_out=. --go-grpc_opt=paths=source_relative --go_opt=paths=source_relative *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: auth.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_UserExists_FullMethodName       = "/Auth/UserExists"
	Auth_CreateUser_FullMethodName       = "/Auth/CreateUser"
	Auth_GetUserByEmail_FullMethodName   = "/Auth/GetUserByEmail"
	Auth_GetUserBySession_FullMethodName = "/Auth/GetUserBySession"
	Auth_EditUserEmail_FullMethodName    = "/Auth/EditUserEmail"
	Auth_SessionExists_FullMethodName    = "/Auth/SessionExists"
	Auth_AddSession_FullMethodName       = "/Auth/AddSession"
	Auth_RemoveSession_FullMethodName    = "/Auth/RemoveSession"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	UserExists(ctx context.Context, in *EmailOnlyRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CreateUser(ctx context.Context, in *UnauthorizedUser, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *EmailOnlyRequest, opts ...grpc.CallOption) (*User, error)
	GetUserBySession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*User, error)
	EditUserEmail(ctx context.Context, in *EditEmailRequest, opts ...grpc.CallOption) (*User, error)
	SessionExists(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*ExistsResponse, error)
	AddSession(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*SessionData, error)
	RemoveSession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) UserExists(ctx context.Context, in *EmailOnlyRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, Auth_UserExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUser(ctx context.Context, in *UnauthorizedUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Auth_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserByEmail(ctx context.Context, in *EmailOnlyRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Auth_GetUserByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserBySession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Auth_GetUserBySession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EditUserEmail(ctx context.Context, in *EditEmailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Auth_EditUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SessionExists(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, Auth_SessionExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddSession(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*SessionData, error) {
	out := new(SessionData)
	err := c.cc.Invoke(ctx, Auth_AddSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RemoveSession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Auth_RemoveSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	UserExists(context.Context, *EmailOnlyRequest) (*ExistsResponse, error)
	CreateUser(context.Context, *UnauthorizedUser) (*User, error)
	GetUserByEmail(context.Context, *EmailOnlyRequest) (*User, error)
	GetUserBySession(context.Context, *SessionData) (*User, error)
	EditUserEmail(context.Context, *EditEmailRequest) (*User, error)
	SessionExists(context.Context, *SessionData) (*ExistsResponse, error)
	AddSession(context.Context, *IDOnlyRequest) (*SessionData, error)
	RemoveSession(context.Context, *SessionData) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) UserExists(context.Context, *EmailOnlyRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExists not implemented")
}
func (UnimplementedAuthServer) CreateUser(context.Context, *UnauthorizedUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServer) GetUserByEmail(context.Context, *EmailOnlyRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedAuthServer) GetUserBySession(context.Context, *SessionData) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBySession not implemented")
}
func (UnimplementedAuthServer) EditUserEmail(context.Context, *EditEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserEmail not implemented")
}
func (UnimplementedAuthServer) SessionExists(context.Context, *SessionData) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionExists not implemented")
}
func (UnimplementedAuthServer) AddSession(context.Context, *IDOnlyRequest) (*SessionData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSession not implemented")
}
func (UnimplementedAuthServer) RemoveSession(context.Context, *SessionData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UserExists(ctx, req.(*EmailOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUser(ctx, req.(*UnauthorizedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserByEmail(ctx, req.(*EmailOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetUserBySession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserBySession(ctx, req.(*SessionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EditUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EditUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_EditUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EditUserEmail(ctx, req.(*EditEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SessionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SessionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SessionExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SessionExists(ctx, req.(*SessionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_AddSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddSession(ctx, req.(*IDOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RemoveSession(ctx, req.(*SessionData))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserExists",
			Handler:    _Auth_UserExists_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Auth_CreateUser_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _Auth_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserBySession",
			Handler:    _Auth_GetUserBySession_Handler,
		},
		{
			MethodName: "EditUserEmail",
			Handler:    _Auth_EditUserEmail_Handler,
		},
		{
			MethodName: "SessionExists",
			Handler:    _Auth_SessionExists_Handler,
		},
		{
			MethodName: "AddSession",
			Handler:    _Auth_AddSession_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _Auth_RemoveSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
