// Code generated by MockGen. DO NOT EDIT.
// Source: adverts.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_IMAO/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAdvertsInfo is a mock of AdvertsInfo interface.
type MockAdvertsInfo struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertsInfoMockRecorder
}

// MockAdvertsInfoMockRecorder is the mock recorder for MockAdvertsInfo.
type MockAdvertsInfoMockRecorder struct {
	mock *MockAdvertsInfo
}

// NewMockAdvertsInfo creates a new mock instance.
func NewMockAdvertsInfo(ctrl *gomock.Controller) *MockAdvertsInfo {
	mock := &MockAdvertsInfo{ctrl: ctrl}
	mock.recorder = &MockAdvertsInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertsInfo) EXPECT() *MockAdvertsInfoMockRecorder {
	return m.recorder
}

// CreateAdvert mocks base method.
func (m *MockAdvertsInfo) CreateAdvert(ctx context.Context, files []*multipart.FileHeader, data models.ReceivedAdData) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvert", ctx, files, data)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvert indicates an expected call of CreateAdvert.
func (mr *MockAdvertsInfoMockRecorder) CreateAdvert(ctx, files, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvert", reflect.TypeOf((*MockAdvertsInfo)(nil).CreateAdvert), ctx, files, data)
}

// GetAdvert mocks base method.
func (m *MockAdvertsInfo) GetAdvert(ctx context.Context, advertID uint, city, category string) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvert", ctx, advertID, city, category)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvert indicates an expected call of GetAdvert.
func (mr *MockAdvertsInfoMockRecorder) GetAdvert(ctx, advertID, city, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvert", reflect.TypeOf((*MockAdvertsInfo)(nil).GetAdvert), ctx, advertID, city, category)
}

// GetAdvertByOnlyByID mocks base method.
func (m *MockAdvertsInfo) GetAdvertByOnlyByID(ctx context.Context, advertID uint) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertByOnlyByID", ctx, advertID)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertByOnlyByID indicates an expected call of GetAdvertByOnlyByID.
func (mr *MockAdvertsInfoMockRecorder) GetAdvertByOnlyByID(ctx, advertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertByOnlyByID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetAdvertByOnlyByID), ctx, advertID)
}

// GetAdvertsByCategory mocks base method.
func (m *MockAdvertsInfo) GetAdvertsByCategory(ctx context.Context, category, city string, startID, num uint) ([]*models.ReturningAdInList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsByCategory", ctx, category, city, startID, num)
	ret0, _ := ret[0].([]*models.ReturningAdInList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsByCategory indicates an expected call of GetAdvertsByCategory.
func (mr *MockAdvertsInfoMockRecorder) GetAdvertsByCategory(ctx, category, city, startID, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsByCategory", reflect.TypeOf((*MockAdvertsInfo)(nil).GetAdvertsByCategory), ctx, category, city, startID, num)
}

// GetAdvertsByCity mocks base method.
func (m *MockAdvertsInfo) GetAdvertsByCity(ctx context.Context, city string, startID, num uint) ([]*models.ReturningAdInList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsByCity", ctx, city, startID, num)
	ret0, _ := ret[0].([]*models.ReturningAdInList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsByCity indicates an expected call of GetAdvertsByCity.
func (mr *MockAdvertsInfoMockRecorder) GetAdvertsByCity(ctx, city, startID, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsByCity", reflect.TypeOf((*MockAdvertsInfo)(nil).GetAdvertsByCity), ctx, city, startID, num)
}

// GetCategoryID mocks base method.
func (m *MockAdvertsInfo) GetCategoryID(city string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryID", city)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryID indicates an expected call of GetCategoryID.
func (mr *MockAdvertsInfoMockRecorder) GetCategoryID(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetCategoryID), city)
}

// GetCityID mocks base method.
func (m *MockAdvertsInfo) GetCityID(city string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityID", city)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityID indicates an expected call of GetCityID.
func (mr *MockAdvertsInfoMockRecorder) GetCityID(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetCityID), city)
}

// GetLastAdvertID mocks base method.
func (m *MockAdvertsInfo) GetLastAdvertID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAdvertID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetLastAdvertID indicates an expected call of GetLastAdvertID.
func (mr *MockAdvertsInfoMockRecorder) GetLastAdvertID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAdvertID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetLastAdvertID))
}

// GetLastCategoryID mocks base method.
func (m *MockAdvertsInfo) GetLastCategoryID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCategoryID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetLastCategoryID indicates an expected call of GetLastCategoryID.
func (mr *MockAdvertsInfoMockRecorder) GetLastCategoryID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCategoryID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetLastCategoryID))
}

// GetLastLocationID mocks base method.
func (m *MockAdvertsInfo) GetLastLocationID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLocationID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetLastLocationID indicates an expected call of GetLastLocationID.
func (mr *MockAdvertsInfoMockRecorder) GetLastLocationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLocationID", reflect.TypeOf((*MockAdvertsInfo)(nil).GetLastLocationID))
}
