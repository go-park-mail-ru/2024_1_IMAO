// Code generated by MockGen. DO NOT EDIT.
// Source: adverts.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_IMAO/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAdvertsStorageInterface is a mock of AdvertsStorageInterface interface.
type MockAdvertsStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertsStorageInterfaceMockRecorder
}

// MockAdvertsStorageInterfaceMockRecorder is the mock recorder for MockAdvertsStorageInterface.
type MockAdvertsStorageInterfaceMockRecorder struct {
	mock *MockAdvertsStorageInterface
}

// NewMockAdvertsStorageInterface creates a new mock instance.
func NewMockAdvertsStorageInterface(ctrl *gomock.Controller) *MockAdvertsStorageInterface {
	mock := &MockAdvertsStorageInterface{ctrl: ctrl}
	mock.recorder = &MockAdvertsStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertsStorageInterface) EXPECT() *MockAdvertsStorageInterfaceMockRecorder {
	return m.recorder
}

// CloseAdvert mocks base method.
func (m *MockAdvertsStorageInterface) CloseAdvert(ctx context.Context, advertID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAdvert", ctx, advertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAdvert indicates an expected call of CloseAdvert.
func (mr *MockAdvertsStorageInterfaceMockRecorder) CloseAdvert(ctx, advertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAdvert", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).CloseAdvert), ctx, advertID)
}

// CreateAdvert mocks base method.
func (m *MockAdvertsStorageInterface) CreateAdvert(ctx context.Context, files []*multipart.FileHeader, data models.ReceivedAdData) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvert", ctx, files, data)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvert indicates an expected call of CreateAdvert.
func (mr *MockAdvertsStorageInterfaceMockRecorder) CreateAdvert(ctx, files, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvert", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).CreateAdvert), ctx, files, data)
}

// EditAdvert mocks base method.
func (m *MockAdvertsStorageInterface) EditAdvert(ctx context.Context, files []*multipart.FileHeader, data models.ReceivedAdData) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvert", ctx, files, data)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditAdvert indicates an expected call of EditAdvert.
func (mr *MockAdvertsStorageInterfaceMockRecorder) EditAdvert(ctx, files, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvert", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).EditAdvert), ctx, files, data)
}

// GetAdvert mocks base method.
func (m *MockAdvertsStorageInterface) GetAdvert(ctx context.Context, advertID uint, city, category string) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvert", ctx, advertID, city, category)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvert indicates an expected call of GetAdvert.
func (mr *MockAdvertsStorageInterfaceMockRecorder) GetAdvert(ctx, advertID, city, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvert", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).GetAdvert), ctx, advertID, city, category)
}

// GetAdvertByOnlyByID mocks base method.
func (m *MockAdvertsStorageInterface) GetAdvertByOnlyByID(ctx context.Context, advertID uint) (*models.ReturningAdvert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertByOnlyByID", ctx, advertID)
	ret0, _ := ret[0].(*models.ReturningAdvert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertByOnlyByID indicates an expected call of GetAdvertByOnlyByID.
func (mr *MockAdvertsStorageInterfaceMockRecorder) GetAdvertByOnlyByID(ctx, advertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertByOnlyByID", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).GetAdvertByOnlyByID), ctx, advertID)
}

// GetAdvertsByCategory mocks base method.
func (m *MockAdvertsStorageInterface) GetAdvertsByCategory(ctx context.Context, category, city string, startID, num uint) ([]*models.ReturningAdInList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsByCategory", ctx, category, city, startID, num)
	ret0, _ := ret[0].([]*models.ReturningAdInList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsByCategory indicates an expected call of GetAdvertsByCategory.
func (mr *MockAdvertsStorageInterfaceMockRecorder) GetAdvertsByCategory(ctx, category, city, startID, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsByCategory", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).GetAdvertsByCategory), ctx, category, city, startID, num)
}

// GetAdvertsByCity mocks base method.
func (m *MockAdvertsStorageInterface) GetAdvertsByCity(ctx context.Context, city string, startID, num uint) ([]*models.ReturningAdInList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsByCity", ctx, city, startID, num)
	ret0, _ := ret[0].([]*models.ReturningAdInList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsByCity indicates an expected call of GetAdvertsByCity.
func (mr *MockAdvertsStorageInterfaceMockRecorder) GetAdvertsByCity(ctx, city, startID, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsByCity", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).GetAdvertsByCity), ctx, city, startID, num)
}

// GetAdvertsForUserWhereStatusIs mocks base method.
func (m *MockAdvertsStorageInterface) GetAdvertsForUserWhereStatusIs(ctx context.Context, userId, deleted uint) ([]*models.ReturningAdInList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsForUserWhereStatusIs", ctx, userId, deleted)
	ret0, _ := ret[0].([]*models.ReturningAdInList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsForUserWhereStatusIs indicates an expected call of GetAdvertsForUserWhereStatusIs.
func (mr *MockAdvertsStorageInterfaceMockRecorder) GetAdvertsForUserWhereStatusIs(ctx, userId, deleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsForUserWhereStatusIs", reflect.TypeOf((*MockAdvertsStorageInterface)(nil).GetAdvertsForUserWhereStatusIs), ctx, userId, deleted)
}
