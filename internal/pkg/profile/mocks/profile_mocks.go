// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_IMAO/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProfileStorageInterface is a mock of ProfileStorageInterface interface.
type MockProfileStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProfileStorageInterfaceMockRecorder
}

// MockProfileStorageInterfaceMockRecorder is the mock recorder for MockProfileStorageInterface.
type MockProfileStorageInterfaceMockRecorder struct {
	mock *MockProfileStorageInterface
}

// NewMockProfileStorageInterface creates a new mock instance.
func NewMockProfileStorageInterface(ctrl *gomock.Controller) *MockProfileStorageInterface {
	mock := &MockProfileStorageInterface{ctrl: ctrl}
	mock.recorder = &MockProfileStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileStorageInterface) EXPECT() *MockProfileStorageInterfaceMockRecorder {
	return m.recorder
}

// AppendSubByIDs mocks base method.
func (m *MockProfileStorageInterface) AppendSubByIDs(ctx context.Context, userID, advertID uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendSubByIDs", ctx, userID, advertID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AppendSubByIDs indicates an expected call of AppendSubByIDs.
func (mr *MockProfileStorageInterfaceMockRecorder) AppendSubByIDs(ctx, userID, advertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSubByIDs", reflect.TypeOf((*MockProfileStorageInterface)(nil).AppendSubByIDs), ctx, userID, advertID)
}

// CreateProfile mocks base method.
func (m *MockProfileStorageInterface) CreateProfile(ctx context.Context, userID uint) *models.Profile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, userID)
	ret0, _ := ret[0].(*models.Profile)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileStorageInterfaceMockRecorder) CreateProfile(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileStorageInterface)(nil).CreateProfile), ctx, userID)
}

// GetProfileByUserID mocks base method.
func (m *MockProfileStorageInterface) GetProfileByUserID(ctx context.Context, profileId, userId uint) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUserID", ctx, profileId, userId)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUserID indicates an expected call of GetProfileByUserID.
func (mr *MockProfileStorageInterfaceMockRecorder) GetProfileByUserID(ctx, profileId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUserID", reflect.TypeOf((*MockProfileStorageInterface)(nil).GetProfileByUserID), ctx, profileId, userId)
}

// SetProfileCity mocks base method.
func (m *MockProfileStorageInterface) SetProfileCity(ctx context.Context, userID uint, data models.City) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileCity", ctx, userID, data)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfileCity indicates an expected call of SetProfileCity.
func (mr *MockProfileStorageInterfaceMockRecorder) SetProfileCity(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileCity", reflect.TypeOf((*MockProfileStorageInterface)(nil).SetProfileCity), ctx, userID, data)
}

// SetProfileInfo mocks base method.
func (m *MockProfileStorageInterface) SetProfileInfo(ctx context.Context, userID uint, data models.EditProfileNec) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileInfo", ctx, userID, data)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfileInfo indicates an expected call of SetProfileInfo.
func (mr *MockProfileStorageInterfaceMockRecorder) SetProfileInfo(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileInfo", reflect.TypeOf((*MockProfileStorageInterface)(nil).SetProfileInfo), ctx, userID, data)
}

// SetProfilePhone mocks base method.
func (m *MockProfileStorageInterface) SetProfilePhone(ctx context.Context, userID uint, data models.SetProfilePhoneNec) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfilePhone", ctx, userID, data)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfilePhone indicates an expected call of SetProfilePhone.
func (mr *MockProfileStorageInterfaceMockRecorder) SetProfilePhone(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfilePhone", reflect.TypeOf((*MockProfileStorageInterface)(nil).SetProfilePhone), ctx, userID, data)
}
