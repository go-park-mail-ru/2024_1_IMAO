// Code generated by MockGen. DO NOT EDIT.
// Source: profile_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	grpc "github.com/go-park-mail-ru/2024_1_IMAO/internal/pkg/profile/delivery/protobuf"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
)

// MockProfileClient is a mock of ProfileClient interface.
type MockProfileClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileClientMockRecorder
}

// MockProfileClientMockRecorder is the mock recorder for MockProfileClient.
type MockProfileClientMockRecorder struct {
	mock *MockProfileClient
}

// NewMockProfileClient creates a new mock instance.
func NewMockProfileClient(ctrl *gomock.Controller) *MockProfileClient {
	mock := &MockProfileClient{ctrl: ctrl}
	mock.recorder = &MockProfileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileClient) EXPECT() *MockProfileClientMockRecorder {
	return m.recorder
}

// AppendSubByIDs mocks base method.
func (m *MockProfileClient) AppendSubByIDs(ctx context.Context, in *grpc.UserIdMerchantIdRequest, opts ...grpc0.CallOption) (*grpc.AppendSubResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendSubByIDs", varargs...)
	ret0, _ := ret[0].(*grpc.AppendSubResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendSubByIDs indicates an expected call of AppendSubByIDs.
func (mr *MockProfileClientMockRecorder) AppendSubByIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSubByIDs", reflect.TypeOf((*MockProfileClient)(nil).AppendSubByIDs), varargs...)
}

// CreateProfile mocks base method.
func (m *MockProfileClient) CreateProfile(ctx context.Context, in *grpc.ProfileIDRequest, opts ...grpc0.CallOption) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfile", varargs...)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileClientMockRecorder) CreateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileClient)(nil).CreateProfile), varargs...)
}

// EditProfile mocks base method.
func (m *MockProfileClient) EditProfile(ctx context.Context, in *grpc.EditProfileRequest, opts ...grpc0.CallOption) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProfile", varargs...)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockProfileClientMockRecorder) EditProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockProfileClient)(nil).EditProfile), varargs...)
}

// GetProfile mocks base method.
func (m *MockProfileClient) GetProfile(ctx context.Context, in *grpc.ProfileIDRequest, opts ...grpc0.CallOption) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileClientMockRecorder) GetProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileClient)(nil).GetProfile), varargs...)
}

// SetProfileCity mocks base method.
func (m *MockProfileClient) SetProfileCity(ctx context.Context, in *grpc.SetCityRequest, opts ...grpc0.CallOption) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetProfileCity", varargs...)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfileCity indicates an expected call of SetProfileCity.
func (mr *MockProfileClientMockRecorder) SetProfileCity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileCity", reflect.TypeOf((*MockProfileClient)(nil).SetProfileCity), varargs...)
}

// SetProfilePhone mocks base method.
func (m *MockProfileClient) SetProfilePhone(ctx context.Context, in *grpc.SetPhoneRequest, opts ...grpc0.CallOption) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetProfilePhone", varargs...)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfilePhone indicates an expected call of SetProfilePhone.
func (mr *MockProfileClientMockRecorder) SetProfilePhone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfilePhone", reflect.TypeOf((*MockProfileClient)(nil).SetProfilePhone), varargs...)
}

// MockProfileServer is a mock of ProfileServer interface.
type MockProfileServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServerMockRecorder
}

// MockProfileServerMockRecorder is the mock recorder for MockProfileServer.
type MockProfileServerMockRecorder struct {
	mock *MockProfileServer
}

// NewMockProfileServer creates a new mock instance.
func NewMockProfileServer(ctrl *gomock.Controller) *MockProfileServer {
	mock := &MockProfileServer{ctrl: ctrl}
	mock.recorder = &MockProfileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServer) EXPECT() *MockProfileServerMockRecorder {
	return m.recorder
}

// AppendSubByIDs mocks base method.
func (m *MockProfileServer) AppendSubByIDs(arg0 context.Context, arg1 *grpc.UserIdMerchantIdRequest) (*grpc.AppendSubResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendSubByIDs", arg0, arg1)
	ret0, _ := ret[0].(*grpc.AppendSubResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendSubByIDs indicates an expected call of AppendSubByIDs.
func (mr *MockProfileServerMockRecorder) AppendSubByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSubByIDs", reflect.TypeOf((*MockProfileServer)(nil).AppendSubByIDs), arg0, arg1)
}

// CreateProfile mocks base method.
func (m *MockProfileServer) CreateProfile(arg0 context.Context, arg1 *grpc.ProfileIDRequest) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServerMockRecorder) CreateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileServer)(nil).CreateProfile), arg0, arg1)
}

// EditProfile mocks base method.
func (m *MockProfileServer) EditProfile(arg0 context.Context, arg1 *grpc.EditProfileRequest) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockProfileServerMockRecorder) EditProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockProfileServer)(nil).EditProfile), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockProfileServer) GetProfile(arg0 context.Context, arg1 *grpc.ProfileIDRequest) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileServerMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileServer)(nil).GetProfile), arg0, arg1)
}

// SetProfileCity mocks base method.
func (m *MockProfileServer) SetProfileCity(arg0 context.Context, arg1 *grpc.SetCityRequest) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileCity", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfileCity indicates an expected call of SetProfileCity.
func (mr *MockProfileServerMockRecorder) SetProfileCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileCity", reflect.TypeOf((*MockProfileServer)(nil).SetProfileCity), arg0, arg1)
}

// SetProfilePhone mocks base method.
func (m *MockProfileServer) SetProfilePhone(arg0 context.Context, arg1 *grpc.SetPhoneRequest) (*grpc.ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfilePhone", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfilePhone indicates an expected call of SetProfilePhone.
func (mr *MockProfileServerMockRecorder) SetProfilePhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfilePhone", reflect.TypeOf((*MockProfileServer)(nil).SetProfilePhone), arg0, arg1)
}

// mustEmbedUnimplementedProfileServer mocks base method.
func (m *MockProfileServer) mustEmbedUnimplementedProfileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServer")
}

// mustEmbedUnimplementedProfileServer indicates an expected call of mustEmbedUnimplementedProfileServer.
func (mr *MockProfileServerMockRecorder) mustEmbedUnimplementedProfileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServer", reflect.TypeOf((*MockProfileServer)(nil).mustEmbedUnimplementedProfileServer))
}

// MockUnsafeProfileServer is a mock of UnsafeProfileServer interface.
type MockUnsafeProfileServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProfileServerMockRecorder
}

// MockUnsafeProfileServerMockRecorder is the mock recorder for MockUnsafeProfileServer.
type MockUnsafeProfileServerMockRecorder struct {
	mock *MockUnsafeProfileServer
}

// NewMockUnsafeProfileServer creates a new mock instance.
func NewMockUnsafeProfileServer(ctrl *gomock.Controller) *MockUnsafeProfileServer {
	mock := &MockUnsafeProfileServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProfileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProfileServer) EXPECT() *MockUnsafeProfileServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProfileServer mocks base method.
func (m *MockUnsafeProfileServer) mustEmbedUnimplementedProfileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServer")
}

// mustEmbedUnimplementedProfileServer indicates an expected call of mustEmbedUnimplementedProfileServer.
func (mr *MockUnsafeProfileServerMockRecorder) mustEmbedUnimplementedProfileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServer", reflect.TypeOf((*MockUnsafeProfileServer)(nil).mustEmbedUnimplementedProfileServer))
}
